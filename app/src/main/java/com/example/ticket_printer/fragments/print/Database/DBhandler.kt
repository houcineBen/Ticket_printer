package com.example.ticket_printer.fragments.print.Database

import android.content.Context
import android.view.View
import android.widget.EditText
import android.widget.Toast
import com.example.ticket_printer.R
import com.example.ticket_printer.data.Client
import com.example.ticket_printer.data.UserViewModel
import com.example.ticket_printer.data.VisitHistory
import com.example.ticket_printer.fragments.print.printHandler.HandleInput
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.Locale

class DBhandler(
    val context: Context,
    val view: View,
    val handleInput: HandleInput,
    val mClientViewModel: UserViewModel,
    val coroutineScope: CoroutineScope // Add CoroutineScope as a parameter
) {

    private fun getCurrentDateTime(): String {
        val formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm", Locale.getDefault())
        return LocalDateTime.now().format(formatter)
    }

    // DBhandler.kt
    fun insertDataToDatabase() {
        val clientLastName = view.findViewById<EditText>(R.id.lastNameEditText)?.text.toString()
        val phoneNumber = view.findViewById<EditText>(R.id.phoneEditText)?.text.toString()
        val email = view.findViewById<EditText>(R.id.emailEditText)?.text.toString()
        val clientName = view.findViewById<EditText>(R.id.nameEditText)?.text.toString()
        val fixingDetails = view.findViewById<EditText>(R.id.descriptionText)?.text.toString()

        if (handleInput.validateInput()) {
            coroutineScope.launch(Dispatchers.IO) {
                // Check if the client already exists
                val existingClientId = mClientViewModel.getClientIdByPhone(phoneNumber)

                val clientId = existingClientId ?: run {
                    // If the client doesn't exist, add them to the database
                    val newClient = Client(
                        id = 0,  // Let Room auto-generate the ID
                        name = clientName,
                        lastName = clientLastName,
                        phone = phoneNumber,
                        email = email
                    )
                    // Add the client and get the new client's ID
                    mClientViewModel.addClient(newClient)
                }

                if (clientId != -1L) {
                    // Add visit history for the client (existing or new)
                    val visitHistory = VisitHistory(
                        id = 0,  // Auto-generated by Room
                        clientId = clientId,
                        dateTime = getCurrentDateTime(),
                        bikeFixDetails = fixingDetails
                    )
                    mClientViewModel.addVisit(visitHistory)
                    mClientViewModel.updateHasBike(clientId, true)

                    withContext(Dispatchers.Main) {
                        Toast.makeText(context, "Visit added for client ID: $clientId", Toast.LENGTH_SHORT).show()
                    }
                } else {
                    withContext(Dispatchers.Main) {
                        Toast.makeText(context, "Error saving client", Toast.LENGTH_SHORT).show()
                    }
                }
            }
        }
    }
}
